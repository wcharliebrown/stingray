create a go project called stingray

setup the main file for the project that was just created and call it stingray

add code to serve web pages that are API endpoints

use RESTful style API to serve json data for these pages: 
GET user/login 
GET page/about
GET table/test123
POST user/login

on the GET /user/login request, add an array of form elements: username, password along with types and attributes like 'required' and 'title'

add "Current Status" and TODOs to the readme

create a responsive 12-col html template for an 'about' web page use {{main_content}} and {{title}} {{meta_description}} {{header}} {{sidebar}} {{navidation}} {{footer}} {{css_class}} and {{scripts}} with no dependencies

add a new file database.go and include it in stingray.go The database file should initially fake the database data using static content for a 'page' table with these fields: {{title}} - Page title
{{meta_description}} - Meta description
{{header}} - Header content
{{navigation}} - Navigation menu
{{main_content}} - Main content area
{{sidebar}} - Sidebar content
{{footer}} - Footer content
{{css_class}} - Custom CSS classes (commented in style section)
{{scripts}} 

Add a way to stop the daemon without using ctrl-c

add a response_format to all requests. If it's missing the default is html, the only other valid value is json.

add a 'template' table with an id,name, and html fields. Use the file template/default as an example. 
Use the template table to render all pages if the response_format is 'html'
Switch from using a database tabl;e for page templates to using files like templates/default
since templates are read from files, remove the Template struct and change the code to always use the filename of the template in function calls that need it
check if a sqlite database file exists, if not, create it with the Page table
convert this to use https://github.com/go-sql-driver/mysql instead of sqlite

allow templates(template files) to have embedded templates like {{template_login_form}} or {{template_redesign_2025_header}}
implement a naming convention by renaming 'templates/footer_modern' to templates/modern_footer and rename header_2025 to modern_header
change all existing pages to use the 'modern' template.
stop dropping the 'Pages' table and only create and populate it if it doesn't exist
examine the .go files and make suggestions for separating out functionality into new .go files and possibly renaming the existing ones
add session support using 'sessions' table and a session cookie.
Add a groups table.
    Add a users table with email password and a way to link users to 0 or more groups
    If the tables do not exist on startup, create them.
    If the tables were created on startup add two sample users:
    'admin' 'adminuser@servicecompany.net' in the 'admin' group
    'customer' 'customeruser@company.com' in the 'customers' group
    Use the new users table to authenticate logins.
    Create an 'orders' page that only users in the admin group can see.
    Create a FAQ page that only users in the customers table can see.
    Add tests for all this new functionality
    Add API routes for any new features involving users and groups.
Move test passwords to .env for security
Implement argon2 password hashing
Add a table for table metadata called table_metadata which contains metadata on any of the tables. Metadata is things like the groups who can read and the groups that can write to the table.
Add a table for field metadata called field_metadata which will contain metadata on any of the fields in any of the tables. Metadata is things like what db type the field is, what html form element type to use when editing the field, a position within the form, and another position for the field when showing a tabular listing of the rows for the table, and a label for the field when in an html edit form.
Add a page for viewing the rows from a database table in am html table with edit view and delete buttons. 
Add a page for editing or viewing a row in any of the tables either in "engineer" mode showing everything in actual field name labels(without regard to metadata) or in normal mode with nice labels and obeying the metadata.

Implement schema changes
change the name of user_groups_table to _groups
change the name of user_groups table to _users_and_groups
change the name of users table to _users
change the name of pages table to _page
change the name of sessions table to _sessions
add 'created' and 'modified' timestamps fields to all tables
